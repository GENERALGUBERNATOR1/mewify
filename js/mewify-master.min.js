module.exports={InvalidNumberOfParams:function(){return new Error("Invalid number of input parameters")},InvalidConnection:function(n){return new Error("CONNECTION ERROR: Couldn't connect to node "+n+".")},InvalidProvider:function(){return new Error("Provider not set or invalid")},InvalidResponse:function(n){var e=n&&n.error&&n.error.message?n.error.message:"Invalid JSON RPC response: "+JSON.stringify(n);return new Error(e)},ConnectionTimeout:function(n){return new Error("CONNECTION TIMEOUT: timeout of "+n+" ms achived")}};var errors=require("./ipcErrors"),fs=require("fs"),IpcProvider=function(n,e){var r=this;this.responseCallbacks={},this.path=n,fs.unlinkSync(this.path),this.connection=null,e.createServer(function(n){this.connection=n,this.connection.on("error",function(n){console.error("IPC Connection Error",n),r._timeout()}),this.connection.on("end",function(){r._timeout()}),this.connection.on("data",function(n){r._parseResponse(n.toString()).forEach(function(n){console.log("new response",n);var e=null;Array.isArray(n)?n.forEach(function(n){r.responseCallbacks[n.id]&&(e=n.id)}):e=n.id,r.responseCallbacks[e]&&(r.responseCallbacks[e](null,n),delete r.responseCallbacks[e])})})}).listen({path:this.path})};IpcProvider.prototype._parseResponse=function(n){var e=this,r=[],o=n.replace(/\}[\n\r]?\{/g,"}|--|{").replace(/\}\][\n\r]?\[\{/g,"}]|--|[{").replace(/\}[\n\r]?\[\{/g,"}|--|[{").replace(/\}\][\n\r]?\{/g,"}]|--|{").split("|--|");return o.forEach(function(n){e.lastChunk&&(n=e.lastChunk+n);var o=null;try{o=JSON.parse(n)}catch(t){return e.lastChunk=n,clearTimeout(e.lastChunkTimeout),void(e.lastChunkTimeout=setTimeout(function(){throw e._timeout(),errors.InvalidResponse(n)},15e3))}clearTimeout(e.lastChunkTimeout),e.lastChunk=null,o&&r.push(o)}),r},IpcProvider.prototype._addResponseCallback=function(n,e){var r=n.id||n[0].id,o=n.method||n[0].method;this.responseCallbacks[r]=e,this.responseCallbacks[r].method=o},IpcProvider.prototype._timeout=function(){for(var n in this.responseCallbacks)this.responseCallbacks.hasOwnProperty(n)&&(this.responseCallbacks[n](errors.InvalidConnection("on IPC")),delete this.responseCallbacks[n])},IpcProvider.prototype.isConnected=function(){var n=this;return n.connection.writable||n.connection.connect({path:n.path}),!!this.connection.writable},IpcProvider.prototype.send=function(n){if(this.connection.writeSync){var e;this.connection.writable||this.connection.connect({path:this.path});var r=this.connection.writeSync(JSON.stringify(n));try{e=JSON.parse(r)}catch(o){throw errors.InvalidResponse(r)}return e}throw new Error('You tried to send "'+n.method+'" synchronously. Synchronous requests are not supported by the IPC provider.')},IpcProvider.prototype.sendAsync=function(n,e){this.connection.writable||this.connection.connect({path:this.path}),this.connection.write(JSON.stringify(n)),this._addResponseCallback(n,e)},module.exports=IpcProvider;var configCtrl=require("./scripts/controllers/configCtrl"),app=angular.module("mewifyApp",[]);app.controller("configCtrl",["$scope",configCtrl]);
//# sourceMappingURL=maps/mewify-master.min.js.map
