{"version":3,"sources":["main.js","controllers/configCtrl.js","libs/clientHandler.js","libs/configs.js","libs/httpProvider.js","libs/ipcProvider.js","libs/parityOutputProcessor.js","libs/privMethodHandler.js","libs/rpcClient.js","libs/rpcHandler.js"],"names":["angular","require","configs","window","clientHandler","configCtrl","app","module","controller","$scope","init","clientConfig","clientConfigStr","JSON","stringify","$$phase","$apply","showSave","showStart","showStop","disableForm","$watch","saveConfig","fileIO","writeFile","getConfigPath","resp","error","Events","Error","msg","start","ipc","platform","httpPort","httpsPort","stop","disconnect","exports","ipcProvider","httpProvider","path","deleteFileSync","this","netIO","net","prototype","callback","_this","os","homeDir","homedir","defaultVal","configDir","replace","keystore","paths","configFile","existsSync","readFile","data","parse","makeDirs","getConfigDir","getKeysPath","getNodeUrl","node","url","getNodeName","name","getNodeChainId","chainId","rpcClient","rpcHandler","express","use","bodyParser","json","post","req","res","connected","connType","sendResponse","body","httpServer","http","createServer","listen","console","log","e","message","startSSL","keys","httpsServer","https","key","serviceKey","cert","certificate","sslKeyPath","sslkey","pem","createCertificate","days","selfSigned","err","close","IpcProvider","responseCallbacks","clients","server","client","length","Info","on","_parseResponse","toString","forEach","result","splice","indexOf","push","returnValues","dechunkedData","split","lastChunk","isConnected","listening","send","payload","connection","write","parityOutputProcessor","processMethods","eth_getTransactionReceipt","queue","preProcess","Array","isArray","obj","method","id","postProcess","ethGetTransactionReceipt","blockNumber","privMethodHandler","handleMethods","eth_accounts","personal_listAccounts","eth_coinbase","personal_signAndSendTransaction","personal_newAccount","rpc_modules","accounts","handle","params","rpcModules","getCallbackObj","eth","parity","rpc","traces","web3","personal","personalNewAccount","tempAccount","ethUtil","Wallet","generate","fPath","getV3Filename","toV3String","address","getAddressString","ethCoinbase","ethAccounts","output","account","tempAccounts","readAllFiles","fname","cont","isLast","isJSON","sanitizeAddress","signAndSendTransaction","from","fCont","getResponse","jsonrpc","getRandomId","nonce","tx","Tx","sign","fromV3","getPrivateKey","rawTx","serialize","isError","substring","crypto","randomBytes","updataAccounts","request","defaults","jar","call","response","i","isAllowedMethod","getInvalidMethod","isPrivMethod","handlePriv","treq","getErrorMsg","getResultMsg","methodName","code","privMethods","remoteMethods"],"mappings":"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","file":"../mewify-native.min.js","sourcesContent":["var angular = require('angular');\nvar configs = require('./libs/configs');\nwindow.configs = configs;\n/*var ipcProvider = require('./libs/ipcProvider');\nwindow.ipcProvider = ipcProvider;\nvar rpcClient = require('./libs/rpcClient');\nwindow.rpcClient = rpcClient;\nvar rpcHandler = require('./libs/rpcHandler');\nwindow.rpcHandler = rpcHandler;\nvar privMethodHandler = require('./libs/privMethodHandler');\nwindow.privMethodHandler = privMethodHandler;\nvar parityOutputProcessor = require('./libs/parityOutputProcessor');\nwindow.parityOutputProcessor = parityOutputProcessor;*/\nvar clientHandler = require('./libs/clientHandler');\nwindow.clientHandler = clientHandler;\nvar configCtrl = require('./controllers/configCtrl');\n\nvar app = angular.module('mewifyApp', []);\napp.controller('configCtrl', ['$scope', configCtrl]);\n","'use strict';\nvar configCtrl = function($scope) {\n    configs.init(function() {\n        $scope.configs = configs;\n        $scope.clientConfig = $scope.configs.default;\n        $scope.clientConfigStr = JSON.stringify($scope.clientConfig);\n        if (!$scope.$$phase) $scope.$apply();\n    });\n    $scope.showSave = false;\n    $scope.showStart = true;\n    $scope.showStop = false;\n    $scope.disableForm = false;\n    $scope.clientHandler = null;\n    $scope.$watch('clientConfig', function() {\n        if (JSON.stringify($scope.clientConfig) != $scope.clientConfigStr)\n            $scope.showSave = true;\n        else\n            $scope.showSave = false;\n    }, true);\n    $scope.saveConfig = function() {\n        fileIO.writeFile(configs.getConfigPath(), JSON.stringify($scope.clientConfig, null, 4), function(resp) {\n            if (resp.error)\n                Events.Error(resp.msg);\n            else {\n                $scope.clientConfigStr = JSON.stringify($scope.clientConfig);\n                $scope.showSave = false;\n                if (!$scope.$$phase) $scope.$apply();\n            }\n        });\n    }\n    $scope.start = function() {\n        if (!$scope.clientHandler) {\n            $scope.clientHandler = new clientHandler($scope.clientConfig.ipc[$scope.configs.platform], $scope.clientConfig.httpPort, $scope.clientConfig.httpsPort);\n            $scope.showStart = false;\n            $scope.showStop = true;\n            $scope.disableForm = true;\n        }\n    }\n    $scope.stop = function() {\n        if ($scope.clientHandler) {\n            $scope.clientHandler.disconnect();\n            $scope.showStart = true;\n            $scope.showStop = false;\n            $scope.clientHandler = null;\n            $scope.disableForm = false;\n        }\n    }\n};\nmodule.exports = configCtrl;\n","\"use strict\";\nvar ipcProvider = require('./ipcProvider');\nvar httpProvider = require('./httpProvider');\nvar clientHandler = function(path, httpPort, httpsPort) {\n    fileIO.deleteFileSync(path);\n    this.ipcProvider = new ipcProvider(path, netIO.net);\n    this.httpProvider = new httpProvider(httpPort, httpsPort);\n}\nclientHandler.prototype.disconnect = function(){\n    this.ipcProvider.disconnect();\n    this.httpProvider.disconnect();\n}\nmodule.exports = clientHandler;\n","\"use strict\";\nvar configs = function() {}\nconfigs.init = function(callback) {\n    var _this = this;\n    this.platform = os.platform();\n    this.homeDir = os.homedir();\n    var defaultVal = require('../../../configs/default.json');\n    defaultVal.configDir[this.platform] = defaultVal.configDir[this.platform].replace('[[HOME_DIR]]', this.homeDir);\n    defaultVal.ipc[this.platform] = defaultVal.ipc[this.platform].replace('[[HOME_DIR]]', this.homeDir);\n    defaultVal.keystore[this.platform] = defaultVal.keystore[this.platform].replace('[[HOME_DIR]]', this.homeDir);\n    this.paths = {};\n    this.paths.configFile = defaultVal.configDir[this.platform] + 'conf.json';\n    if (fileIO.existsSync(this.paths.configFile)) {\n        fileIO.readFile(this.paths.configFile, function(data) {\n            if (data.error) Events.Error(data.msg);\n            else {\n                _this.default = JSON.parse(data.data);\n                if (callback) callback();\n            }\n        });\n    } else {\n        fileIO.makeDirs(defaultVal.configDir[this.platform], function(data) {\n            if (!data.error) {\n                fileIO.writeFile(_this.paths.configFile, JSON.stringify(defaultVal, null, 4), function(resp) {\n                    if (resp.error)\n                        Events.Error(resp.msg);\n                    else {\n                        _this.default = defaultVal;\n                        fileIO.makeDirs(_this.default.keystore[_this.platform], function() {});\n                        if (callback) callback();\n                    }\n                });\n            } else Events.Error(data.msg);\n        });\n\n    }\n}\nconfigs.getConfigPath = function() {\n    return configs.default.configDir[configs.platform] + 'conf.json';\n};\nconfigs.getConfigDir = function() {\n    return configs.default.configDir[configs.platform];\n};\nconfigs.getKeysPath = function() {\n    return configs.default.keystore[configs.platform];\n};\nconfigs.getNodeUrl = function() {\n    return JSON.parse(configs.default.node).url;\n};\nconfigs.getNodeName = function() {\n    return JSON.parse(configs.default.node).name;\n};\nconfigs.getNodeChainId = function() {\n    return JSON.parse(configs.default.node).chainId;\n};\nmodule.exports = configs;\n","\"use strict\";\nvar rpcClient = require('./rpcClient');\nvar rpcHandler = require('./rpcHandler');\nvar httpProvider = function(httpPort, httpsPort) {\n\tthis.rpcClient = new rpcClient(configs.getNodeUrl());\n\tvar _this = this;\n    var app = netIO.express();\n    app.use(netIO.bodyParser.json());\n    var _this = this;\n    app.post('/', function(req, res) {\n    \tres.connected = true;\n        res.connType = \"http\";\n        new rpcHandler(res, _this.rpcClient).sendResponse(req.body);\n    });\n    try {\n        _this.httpServer = netIO.http.createServer(app);\n        _this.httpServer.listen(httpPort);\n        console.log(\"http server started\");\n    } catch (e) {\n        console.log(e);\n        Events.Error(e.message);\n    }\n    var startSSL = function(keys) {\n        try {\n            _this.httpsServer = netIO.https.createServer({ key: keys.serviceKey, cert: keys.certificate }, app);\n            _this.httpsServer.listen(httpsPort);\n            console.log(\"https server started\");\n        } catch (e) {\n            console.log(e);\n            Events.Error(e.message);\n        }\n    }\n    var sslKeyPath = configs.getConfigDir() + 'ssl_key';\n    if (fileIO.existsSync(sslKeyPath)) {\n        fileIO.readFile(sslKeyPath, function(data) {\n            if (data.error) Events.Error(data.msg);\n            else {\n                var sslkey = JSON.parse(data.data);\n                startSSL(sslkey);\n            }\n        });\n    } else {\n        netIO.pem.createCertificate({ days: 3650, selfSigned: true }, function(err, keys) {\n            fileIO.writeFile(sslKeyPath, JSON.stringify(keys, null, 4), function(resp) {\n                if (resp.error) Events.Error(resp.msg);\n            });\n            startSSL(keys);\n        });\n    }\n\n}\nhttpProvider.prototype.disconnect = function() {\n    if (this.httpServer) this.httpServer.close();\n    console.log(\"http server closed\");\n    if (this.httpsServer) this.httpsServer.close();\n    console.log(\"https server closed\");\n}\n\nmodule.exports = httpProvider;\n","\"use strict\";\nvar rpcClient = require('./rpcClient');\nvar rpcHandler = require('./rpcHandler');\nvar IpcProvider = function(path, net) {\n    var _this = this;\n    this.responseCallbacks = {};\n    this.path = path;\n    this.clients = [];\n    this.rpcClient = new rpcClient(configs.getNodeUrl());\n    this.server = net.createServer(function(client) {\n        console.log(\"new Client! Total Clients: \" + _this.clients.length);\n        Events.Info(\"new Client! Total Clients: \" + _this.clients.length);\n        client.connected = true;\n        client.connType = \"ipc\";\n        client.rpcHandler = new rpcHandler(client, _this.rpcClient);\n        client.on('data', function(data) {\n            _this._parseResponse(data.toString()).forEach(function(result) {\n                client.rpcHandler.sendResponse(result);\n            });\n        });\n        client.on('end', function() {\n            client.connected = false;\n            _this.clients.splice(_this.clients.indexOf(client), 1);\n        });\n        _this.clients.push(client);\n    });\n    this.server.on('listening', function() {\n        console.log('Connection started');\n    });\n    this.server.on('close', function(e) {\n        console.log('Connection closed');\n    });\n    this.server.on('error', function(e) {\n        console.error('IPC Connection Error', e);\n    });\n    this.server.listen({ path: this.path });\n};\n\nIpcProvider.prototype._parseResponse = function(data) {\n    var _this = this,\n        returnValues = [];\n\n    // DE-CHUNKER\n    var dechunkedData = data\n        .replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n        .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n        .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n        .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n        .split('|--|');\n    dechunkedData.forEach(function(data) {\n        if (_this.lastChunk)\n            data = _this.lastChunk + data;\n        var result = null;\n        try {\n            result = JSON.parse(data);\n        } catch (e) {\n            _this.lastChunk = data;\n            return;\n        }\n        if (result)\n            returnValues.push(result);\n    });\n    return returnValues;\n};\n\nIpcProvider.prototype.isConnected = function() {\n    return this.server.listening;\n};\n\nIpcProvider.prototype.disconnect = function() {\n    this.server.close();\n};\n\nIpcProvider.prototype.send = function(payload) {\n    this.connection.write(JSON.stringify(payload));\n};\n\nmodule.exports = IpcProvider;\n","\"use strict\";\nvar parityOutputProcessor = function() {\n    this.processMethods = {\n        \"eth_getTransactionReceipt\": \"ethGetTransactionReceipt\"\n    };\n    this.queue = {};\n}\nparityOutputProcessor.prototype.preProcess = function(req) {;\n    var _this = this;\n    if (Array.isArray(req)) {\n        req.forEach(function(obj) {\n            if (_this.processMethods[obj.method]) {\n                _this.queue[obj.id] = _this.processMethods[obj.method];\n            }\n        });\n    } else if (_this.processMethods[req.method]) {\n        _this.queue[req.id] = _this.processMethods[req.method];\n    }\n}\nparityOutputProcessor.prototype.postProcess = function(resp) {\n    var _this = this;\n    if (Array.isArray(resp)) {\n        resp.forEach(function(obj) {\n            if (_this.queue[obj.id]) {\n                obj = parityOutputProcessor[_this.queue[obj.id]](obj);\n                delete _this.queue[obj.id];\n            }\n        });\n    } else if (_this.queue[resp.id]) {\n        resp = parityOutputProcessor[_this.queue[resp.id]](resp);\n        delete _this.queue[resp.id];\n    }\n    return resp;\n}\nparityOutputProcessor.ethGetTransactionReceipt = function(obj) {\n    if (obj.result && !obj.result.blockNumber) obj.result = null;\n    return obj;\n}\nmodule.exports = parityOutputProcessor;\n","\"use strict\";\nvar privMethodHandler = function(server) {\n    var _this = this;\n    this.server = server;\n    this.handleMethods = {\n            \"eth_accounts\": 'ethAccounts',\n            \"personal_listAccounts\": 'ethAccounts',\n            \"eth_coinbase\": 'ethCoinbase',\n            \"personal_signAndSendTransaction\": 'signAndSendTransaction',\n            \"personal_newAccount\": \"personalNewAccount\",\n            \"rpc_modules\": \"rpcModules\"\n        }\n        //_this.ethAccounts('', function() {});\n}\nprivMethodHandler.accounts = [];\nprivMethodHandler.prototype.handle = function(method, params, callback) {\n    this[this.handleMethods[method]](params, callback);\n}\nprivMethodHandler.prototype.rpcModules = function(params, callback) {\n    callback(privMethodHandler.getCallbackObj(false, '', {\n        \"eth\": \"1.0\",\n        \"net\": \"1.0\",\n        \"parity\": \"1.0\",\n        \"rpc\": \"1.0\",\n        \"traces\": \"1.0\",\n        \"web3\": \"1.0\",\n        \"personal\": \"1.0\"\n    }));\n}\nprivMethodHandler.prototype.personalNewAccount = function(params, callback) {\n    var _this = this;\n    try {\n        var tempAccount = ethUtil.Wallet.generate();\n        var fPath = configs.getKeysPath() + tempAccount.getV3Filename();\n        fileIO.writeFile(fPath, tempAccount.toV3String(params[0]), function(data) {\n            if (data.error) callback(privMethodHandler.getCallbackObj(true, data.msg, ''));\n            else {\n                privMethodHandler.accounts.push({ address: tempAccount.getAddressString(), path: fPath });\n                callback(privMethodHandler.getCallbackObj(false, '', tempAccount.getAddressString()));\n            }\n        });\n    } catch (e) {\n        callback(privMethodHandler.getCallbackObj(true, e.message, ''));\n    }\n}\nprivMethodHandler.prototype.ethCoinbase = function(params, callback) {\n    var _this = this;\n    if (privMethodHandler.accounts.length) callback(privMethodHandler.getCallbackObj(false, '', privMethodHandler.accounts[0].address));\n    else {\n        this.ethAccounts('', function(data) {\n            if (data.error) callback(data);\n            else if (data.data.length) callback(privMethodHandler.getCallbackObj(false, '', data.data[0]));\n            else callback(privMethodHandler.getCallbackObj(false, '', ''));;\n        })\n    }\n}\nprivMethodHandler.prototype.ethAccounts = function(params, callback) {\n    var _this = this;\n    if (privMethodHandler.accounts.length) {\n        var output = [];\n        privMethodHandler.accounts.forEach(function(account) {\n            output.push(account.address);\n        });\n        callback(privMethodHandler.getCallbackObj(false, '', output));\n    } else {\n        var tempAccounts = [];\n        fileIO.readAllFiles(configs.getKeysPath(), function(fname, cont, isLast) {\n            if (privMethodHandler.isJSON(cont) && JSON.parse(cont).address) {\n                tempAccounts.push({ address: privMethodHandler.sanitizeAddress(JSON.parse(cont).address), path: fname });\n            }\n            if (isLast) {\n                privMethodHandler.accounts = tempAccounts;\n                if (privMethodHandler.accounts.length) _this.ethAccounts(params, callback);\n                else callback(privMethodHandler.getCallbackObj(false, '', []));\n            }\n        }, function(err) {\n            Events.Error(err);\n            callback(privMethodHandler.getCallbackObj(true, err, []));\n        });\n    }\n}\nprivMethodHandler.prototype.signAndSendTransaction = function(params, callback) {\n    var _this = this;\n    privMethodHandler.accounts.forEach(function(account) {\n        if (account.address == params[0].from) {\n            fileIO.readFile(account.path, function(fCont) {\n                if (fCont.error) callback(fCont);\n                else {\n                    _this.server.getResponse({ \"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionCount\", \"params\": [params[0].from, 'latest'], \"id\": privMethodHandler.getRandomId() }, function(data) {\n                        if (data.error) callback(privMethodHandler.getCallbackObj(true, data.error.message, ''));\n                        else {\n                            try {\n                                params[0].nonce = data.result;\n                                params[0].chainId = configs.getNodeChainId();\n                                var tx = new ethUtil.Tx(params[0]);\n                                tx.sign(ethUtil.Wallet.fromV3(fCont.data, params[1], true).getPrivateKey());\n                                var rawTx = tx.serialize().toString('hex');\n                                _this.server.getResponse({ \"jsonrpc\": \"2.0\", \"method\": \"eth_sendRawTransaction\", \"params\": ['0x' + rawTx], \"id\": privMethodHandler.getRandomId() }, function(data) {\n                                    if (data.error) callback(privMethodHandler.getCallbackObj(true, data.error.message, ''));\n                                    else callback(privMethodHandler.getCallbackObj(false, '', data.result));\n                                });\n                            } catch (err) {\n                                Events.Error(err.message);\n                                callback(privMethodHandler.getCallbackObj(true, err.message, []));\n                            }\n                        }\n                    });\n                }\n            });\n        }\n    });\n\n}\nprivMethodHandler.getCallbackObj = function(isError, msg, data) {\n    return { error: isError, msg: msg, data: data };\n}\nprivMethodHandler.sanitizeAddress = function(address) {\n    address = address.substring(0, 2) == '0x' ? address.substring(2) : address;\n    return '0x' + address;\n}\nprivMethodHandler.isJSON = function(json) {\n    try {\n        JSON.parse(json);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\nprivMethodHandler.getRandomId = function() {\n    return ethUtil.crypto.randomBytes(16).toString('hex');\n}\nprivMethodHandler.updataAccounts = false;\nmodule.exports = privMethodHandler;\n","\"use strict\";\nvar parityOutputProcessor = require('./parityOutputProcessor');\nvar rpcClient = function(server) {\n    this.server = server;\n    this.request = netIO.request.defaults({ jar: true });\n    this.parityOutputProcessor = new parityOutputProcessor();\n}\nrpcClient.prototype.call = function(body, callback) {\n    var _this = this;\n    _this.request({\n        url: _this.server,\n        method: \"POST\",\n        json: true,\n        body: body\n    }, function(error, response, body) {\n        callback(error, response, body);\n    });\n}\nrpcClient.prototype.getResponse = function(body, callback) {\n    var _this = this;\n    _this.parityOutputProcessor.preProcess(body);\n    _this.call(body, function(err, res, body) {\n        if (err) Events.Error(err);\n        else {\n            body = _this.parityOutputProcessor.postProcess(body);\n            callback(body);\n        }\n    });\n}\nmodule.exports = rpcClient;\n","\"use strict\";\nvar privMethodHandler = require('./privMethodHandler');\nvar rpcHandler = function(client, server) {\n    this.client = client;\n    this.server = server;\n    this.privMethodHandler = new privMethodHandler(server);\n}\nrpcHandler.prototype.sendResponse = function(req) {\n    console.log(req);\n    var isArray = false;\n    var _this = this;\n    if (Array.isArray(req)) {\n        isArray = true;\n        for (var i in req) {\n            if (req[i].method && !rpcHandler.isAllowedMethod(req[i].method)) {\n                this.write(rpcHandler.getInvalidMethod(req[i].method, req[i].id));\n                req.splice(i, 1);\n            }\n            if (req[i].method && rpcHandler.isPrivMethod(req[i].method)) {\n                var handlePriv = function(treq) {\n                    _this.privMethodHandler.handle(treq.method, treq.params, function(data) {\n                        if (data.error) _this.write(rpcHandler.getErrorMsg(data.msg, treq.id))\n                        else {\n                            _this.write(rpcHandler.getResultMsg(data.data, treq.id));\n                        }\n                    });\n                }\n                handlePriv(req[i]);\n                req.splice(i, 1);\n            }\n        }\n    } else if (req.method && !rpcHandler.isAllowedMethod(req.method)) {\n        this.write(rpcHandler.getInvalidMethod(req.method, req.id));\n    } else if (!req.method) {\n        this.write(rpcHandler.getInvalidMethod('Invalid number of input parameters', req.id));\n    }\n    if (Array.isArray(req)) {\n        if (req.length)\n            _this.server.getResponse(req, function(res) {\n                _this.write(res);\n            });\n    } else {\n        if (rpcHandler.isPrivMethod(req.method)) {\n            _this.privMethodHandler.handle(req.method, req.params, function(data) {\n                if (data.error) _this.write(rpcHandler.getErrorMsg(data.msg, req.id))\n                else {\n                    _this.write(rpcHandler.getResultMsg(data.data, req.id));\n                }\n            });\n        } else {\n            _this.server.getResponse(req, function(res) {\n                _this.write(res);\n            });\n        }\n    }\n}\nrpcHandler.prototype.write = function(data) {\n    //console.log(data);\n    var _this = this;\n    if (_this.client.connected){\n        console.log(data);\n        if(_this.client.connType==\"ipc\") _this.client.write(JSON.stringify(data));\n        else if(_this.client.connType==\"http\") _this.client.json(data);\n    }\n}\nrpcHandler.getInvalidMethod = function(methodName, id) {\n    Events.Error(\"{\" + methodName + \"} Method not found or unavailable\");\n    return { \"jsonrpc\": \"2.0\", \"error\": { \"code\": -32601, \"message\": \"{\" + methodName + \"} Method not found or unavailable\", \"data\": null }, \"id\": id };\n}\nrpcHandler.getErrorMsg = function(error, id) {\n    Events.Error(error);\n    return { \"jsonrpc\": \"2.0\", \"error\": { \"code\": -1, \"message\": error, \"data\": null }, \"id\": id };\n}\nrpcHandler.getResultMsg = function(result, id) {\n    return { jsonrpc: \"2.0\", result: result, id: id };\n}\nrpcHandler.isPrivMethod = function(method) {\n    return rpcHandler.privMethods.indexOf(method) > -1;\n}\nrpcHandler.isAllowedMethod = function(method) {\n    return rpcHandler.remoteMethods.indexOf(method) > -1 || rpcHandler.isPrivMethod(method);\n}\nrpcHandler.remoteMethods = require('./methods/remoteMethods.json');\nrpcHandler.privMethods = require('./methods/privMethods.json');\nmodule.exports = rpcHandler;\n"]}